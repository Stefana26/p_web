/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Author } from './Author';
import {
    AuthorFromJSON,
    AuthorFromJSONTyped,
    AuthorToJSON,
} from './Author';
import type { Genre } from './Genre';
import {
    GenreFromJSON,
    GenreFromJSONTyped,
    GenreToJSON,
} from './Genre';
import type { Rating } from './Rating';
import {
    RatingFromJSON,
    RatingFromJSONTyped,
    RatingToJSON,
} from './Rating';
import type { Review } from './Review';
import {
    ReviewFromJSON,
    ReviewFromJSONTyped,
    ReviewToJSON,
} from './Review';

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Book
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Book
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    pages?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    authorId?: string;
    /**
     * 
     * @type {Author}
     * @memberof Book
     */
    author?: Author;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    genreId?: string;
    /**
     * 
     * @type {Genre}
     * @memberof Book
     */
    genre?: Genre;
    /**
     * 
     * @type {Array<Review>}
     * @memberof Book
     */
    reviews?: Array<Review> | null;
    /**
     * 
     * @type {Array<Rating>}
     * @memberof Book
     */
    ratings?: Array<Rating> | null;
}

/**
 * Check if a given object implements the Book interface.
 */
export function instanceOfBook(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BookFromJSON(json: any): Book {
    return BookFromJSONTyped(json, false);
}

export function BookFromJSONTyped(json: any, ignoreDiscriminator: boolean): Book {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'pages': !exists(json, 'pages') ? undefined : json['pages'],
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'author': !exists(json, 'author') ? undefined : AuthorFromJSON(json['author']),
        'genreId': !exists(json, 'genreId') ? undefined : json['genreId'],
        'genre': !exists(json, 'genre') ? undefined : GenreFromJSON(json['genre']),
        'reviews': !exists(json, 'reviews') ? undefined : (json['reviews'] === null ? null : (json['reviews'] as Array<any>).map(ReviewFromJSON)),
        'ratings': !exists(json, 'ratings') ? undefined : (json['ratings'] === null ? null : (json['ratings'] as Array<any>).map(RatingFromJSON)),
    };
}

export function BookToJSON(value?: Book | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'title': value.title,
        'description': value.description,
        'pages': value.pages,
        'authorId': value.authorId,
        'author': AuthorToJSON(value.author),
        'genreId': value.genreId,
        'genre': GenreToJSON(value.genre),
        'reviews': value.reviews === undefined ? undefined : (value.reviews === null ? null : (value.reviews as Array<any>).map(ReviewToJSON)),
        'ratings': value.ratings === undefined ? undefined : (value.ratings === null ? null : (value.ratings as Array<any>).map(RatingToJSON)),
    };
}

